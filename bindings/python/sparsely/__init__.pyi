from typing import overload
import numpy as np

class CSR:
    shape: tuple[int, int]

    def __init__(self, *, nrows: int, ncols: int, rowptr: np.ndarray, colind: np.ndarray, values: np.ndarray) -> None: ...

    def todense(self) -> np.ndarray: ...

    @overload
    def dot(self, rhs: 'CSR') -> 'CSR': ...
    @overload
    def dot(self, rhs: np.ndarray) -> np.ndarray: ...

    @overload
    def __matmul__(self, rhs: 'CSR') -> 'CSR': ...
    @overload
    def __matmul__(self, rhs: np.ndarray) -> np.ndarray: ...

    def sort_indices(self) -> None: ...
    def __getitem__(self, key: tuple[int, int]) -> float: ...

class CSC:
    shape: tuple[int, int]

    def __init__(self, *, nrows: int, ncols: int, colptr: np.ndarray, rowind: np.ndarray, values: np.ndarray) -> None: ...

    def todense(self) -> np.ndarray: ...
    def sort_indices(self) -> None: ...
    def __getitem__(self, key: tuple[int, int]) -> float: ...

class LIL:
    shape: tuple[int, int]

    def __init__(self, shape: tuple[int, int]) -> None: ...
    def __getitem__(self, key: tuple[int, int]) -> float: ...
    def __setitem__(self, key: tuple[int, int], value: float) -> None: ...
    def tocsr(self) -> CSR: ...

def cholesky(A: CSR) -> CSR: ...
def solve_cholesky(L: CSR, b: np.ndarray) -> np.ndarray: ...

# aliases for array types
csr_array: type[CSR]
csc_array: type[CSC]
lil_array: type[LIL]